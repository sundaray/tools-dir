"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.retry = exports.raceAll = exports.make = exports.executionIdWithAttempt = exports.TypeId = exports.CurrentAttempt = void 0;
var Context = _interopRequireWildcard(require("effect/Context"));
var Effect = _interopRequireWildcard(require("effect/Effect"));
var Effectable = _interopRequireWildcard(require("effect/Effectable"));
var _Function = require("effect/Function");
var Schema = _interopRequireWildcard(require("effect/Schema"));
var DurableDeferred = _interopRequireWildcard(require("./DurableDeferred.js"));
var _crypto = require("./internal/crypto.js");
var Workflow = _interopRequireWildcard(require("./Workflow.js"));
function _interopRequireWildcard(e, t) { if ("function" == typeof WeakMap) var r = new WeakMap(), n = new WeakMap(); return (_interopRequireWildcard = function (e, t) { if (!t && e && e.__esModule) return e; var o, i, f = { __proto__: null, default: e }; if (null === e || "object" != typeof e && "function" != typeof e) return f; if (o = t ? n : r) { if (o.has(e)) return o.get(e); o.set(e, f); } for (const t in e) "default" !== t && {}.hasOwnProperty.call(e, t) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, t)) && (i.get || i.set) ? o(f, t, i) : f[t] = e[t]); return f; })(e, t); }
/**
 * @since 1.0.0
 * @category Symbols
 */
const TypeId = exports.TypeId = /*#__PURE__*/Symbol.for("@effect/workflow/Activity");
/**
 * @since 1.0.0
 * @category Constructors
 */
const make = options => {
  const successSchema = options.success ?? Schema.Void;
  const errorSchema = options.error ?? Schema.Never;
  // eslint-disable-next-line prefer-const
  let execute;
  const self = {
    ...Effectable.CommitPrototype,
    [TypeId]: TypeId,
    name: options.name,
    successSchema,
    errorSchema,
    exitSchema: Schema.ExitFromSelf({
      success: successSchema,
      failure: errorSchema,
      defect: Schema.Defect
    }),
    execute: options.execute,
    executeEncoded: Effect.matchEffect(options.execute, {
      onFailure: error => Effect.flatMap(Effect.orDie(Schema.encode(self.errorSchema)(error)), Effect.fail),
      onSuccess: value => Effect.orDie(Schema.encode(self.successSchema)(value))
    }),
    commit() {
      return execute;
    }
  };
  execute = makeExecute(self);
  return self;
};
/**
 * @since 1.0.0
 * @category Error handling
 */
exports.make = make;
const retry = exports.retry = /*#__PURE__*/(0, _Function.dual)(2, (effect, options) => Effect.suspend(() => {
  let attempt = 1;
  return Effect.suspend(() => Effect.provideService(effect, CurrentAttempt, attempt++)).pipe(Effect.retry(options));
}));
/**
 * @since 1.0.0
 * @category Attempts
 */
class CurrentAttempt extends /*#__PURE__*/Context.Reference()("@effect/workflow/Activity/CurrentAttempt", {
  defaultValue: () => 1
}) {}
/**
 * @since 1.0.0
 * @category Execution ID
 */
exports.CurrentAttempt = CurrentAttempt;
const executionIdWithAttempt = exports.executionIdWithAttempt = /*#__PURE__*/Effect.gen(function* () {
  const instance = yield* InstanceTag;
  const attempt = yield* CurrentAttempt;
  return yield* (0, _crypto.makeHashDigest)(`${instance.executionId}-${attempt}`);
});
/**
 * @since 1.0.0
 * @category Racing
 */
const raceAll = (name, activities) => DurableDeferred.raceAll({
  name: `Activity/${name}`,
  success: Schema.Union(...activities.map(activity => activity.successSchema)),
  error: Schema.Union(...activities.map(activity => activity.errorSchema)),
  effects: activities
});
// -----------------------------------------------------------------------------
// internal
// -----------------------------------------------------------------------------
exports.raceAll = raceAll;
const EngineTag = /*#__PURE__*/Context.GenericTag("@effect/workflow/WorkflowEngine");
const InstanceTag = /*#__PURE__*/Context.GenericTag("@effect/workflow/WorkflowEngine/WorkflowInstance");
const makeExecute = /*#__PURE__*/Effect.fnUntraced(function* (activity) {
  const engine = yield* EngineTag;
  const instance = yield* InstanceTag;
  const attempt = yield* CurrentAttempt;
  const result = yield* Workflow.wrapActivityResult(engine.activityExecute({
    activity,
    attempt
  }), _ => _._tag === "Suspended");
  if (result._tag === "Suspended") {
    instance.suspended = true;
    return yield* Effect.interrupt;
  }
  const exit = yield* Effect.orDie(Schema.decode(activity.exitSchema)(result.exit));
  return yield* exit;
});
//# sourceMappingURL=Activity.js.map