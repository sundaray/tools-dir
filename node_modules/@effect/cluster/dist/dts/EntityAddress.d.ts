/**
 * @since 1.0.0
 */
import * as Equal from "effect/Equal";
import * as Hash from "effect/Hash";
import * as Schema from "effect/Schema";
import { ShardId } from "./ShardId.js";
/**
 * @since 1.0.0
 * @category type ids
 */
export declare const TypeId: unique symbol;
/**
 * @since 1.0.0
 * @category type ids
 */
export type TypeId = typeof TypeId;
declare const EntityAddress_base: Schema.Class<EntityAddress, {
    shardId: typeof ShardId;
    entityType: Schema.brand<typeof Schema.NonEmptyTrimmedString, "EntityType">;
    entityId: Schema.brand<typeof Schema.NonEmptyTrimmedString, "EntityId">;
}, Schema.Struct.Encoded<{
    shardId: typeof ShardId;
    entityType: Schema.brand<typeof Schema.NonEmptyTrimmedString, "EntityType">;
    entityId: Schema.brand<typeof Schema.NonEmptyTrimmedString, "EntityId">;
}>, never, {
    readonly shardId: ShardId;
} & {
    readonly entityType: string & import("effect/Brand").Brand<"EntityType">;
} & {
    readonly entityId: string & import("effect/Brand").Brand<"EntityId">;
}, {}, {}>;
/**
 * Represents the unique address of an entity within the cluster.
 *
 * @since 1.0.0
 * @category models
 */
export declare class EntityAddress extends EntityAddress_base {
    /**
     * @since 1.0.0
     */
    readonly [TypeId]: symbol;
    /**
     * @since 1.0.0
     */
    [Equal.symbol](that: EntityAddress): boolean;
    /**
     * @since 1.0.0
     */
    [Hash.symbol](): number;
}
/**
 * Represents the unique address of an entity within the cluster.
 *
 * @since 1.0.0
 * @category schemas
 */
export declare const EntityAddressFromSelf: Schema.Schema<EntityAddress>;
export {};
//# sourceMappingURL=EntityAddress.d.ts.map