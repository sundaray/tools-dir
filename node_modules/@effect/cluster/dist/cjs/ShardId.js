"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.make = exports.TypeId = exports.ShardId = void 0;
var Equal = _interopRequireWildcard(require("effect/Equal"));
var Hash = _interopRequireWildcard(require("effect/Hash"));
var S = _interopRequireWildcard(require("effect/Schema"));
function _interopRequireWildcard(e, t) { if ("function" == typeof WeakMap) var r = new WeakMap(), n = new WeakMap(); return (_interopRequireWildcard = function (e, t) { if (!t && e && e.__esModule) return e; var o, i, f = { __proto__: null, default: e }; if (null === e || "object" != typeof e && "function" != typeof e) return f; if (o = t ? n : r) { if (o.has(e)) return o.get(e); o.set(e, f); } for (const t in e) "default" !== t && {}.hasOwnProperty.call(e, t) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, t)) && (i.get || i.set) ? o(f, t, i) : f[t] = e[t]); return f; })(e, t); }
/**
 * @since 1.0.0
 */

/**
 * @since 1.0.0
 * @category Symbols
 */
const TypeId = exports.TypeId = /*#__PURE__*/Symbol.for("@effect/cluster/ShardId");
const constDisableValidation = {
  disableValidation: true
};
/**
 * @since 1.0.0
 * @category Constructors
 */
const make = (group, id) => new ShardId({
  group,
  id
}, constDisableValidation);
/**
 * @since 1.0.0
 * @category Models
 */
exports.make = make;
class ShardId extends /*#__PURE__*/S.Class("@effect/cluster/ShardId")({
  group: S.String,
  id: S.Int
}) {
  /**
   * @since 1.0.0
   */
  [TypeId] = TypeId;
  /**
   * @since 1.0.0
   */
  [Equal.symbol](that) {
    return this.group === that.group && this.id === that.id;
  }
  /**
   * @since 1.0.0
   */
  [Hash.symbol]() {
    return Hash.cached(this, Hash.string(this.toString()));
  }
  /**
   * @since 1.0.0
   */
  toString() {
    return `${this.group}:${this.id}`;
  }
  /**
   * @since 1.0.0
   */
  static toString(shardId) {
    return `${shardId.group}:${shardId.id}`;
  }
  /**
   * @since 1.0.0
   */
  static fromStringEncoded(s) {
    const index = s.lastIndexOf(":");
    if (index === -1) {
      throw new Error(`Invalid ShardId format`);
    }
    const group = s.substring(0, index);
    const id = Number(s.substring(index + 1));
    if (isNaN(id)) {
      throw new Error(`ShardId id must be a number`);
    }
    return {
      group,
      id
    };
  }
  /**
   * @since 1.0.0
   */
  static fromString(s) {
    return new ShardId(ShardId.fromStringEncoded(s), constDisableValidation);
  }
}
exports.ShardId = ShardId;
//# sourceMappingURL=ShardId.js.map