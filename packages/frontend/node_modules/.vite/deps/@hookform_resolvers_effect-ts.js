import {
  ArrayFormatter,
  Effect_exports,
  decodeUnknown
} from "./chunk-2GVWGMWC.js";
import {
  appendErrors,
  get,
  set
} from "./chunk-YVAXGXHR.js";
import "./chunk-QV4AIQOX.js";
import "./chunk-G3PMV62Z.js";

// ../../node_modules/@hookform/resolvers/dist/resolvers.mjs
var r = (t, r2, o2) => {
  if (t && "reportValidity" in t) {
    const s2 = get(o2, r2);
    t.setCustomValidity(s2 && s2.message || ""), t.reportValidity();
  }
};
var o = (e, t) => {
  for (const o2 in t.fields) {
    const s2 = t.fields[o2];
    s2 && s2.ref && "reportValidity" in s2.ref ? r(s2.ref, o2, e) : s2 && s2.refs && s2.refs.forEach((t2) => r(t2, o2, e));
  }
};
var s = (r2, s2) => {
  s2.shouldUseNativeValidation && o(r2, s2);
  const n2 = {};
  for (const o2 in r2) {
    const f = get(s2.fields, o2), c = Object.assign(r2[o2] || {}, { ref: f && f.ref });
    if (i(s2.names || Object.keys(r2), o2)) {
      const r3 = Object.assign({}, get(n2, o2));
      set(r3, "root", c), set(n2, o2, r3);
    } else set(n2, o2, c);
  }
  return n2;
};
var i = (e, t) => {
  const r2 = n(t);
  return e.some((e2) => n(e2).match(`^${r2}\\.\\d+`));
};
function n(e) {
  return e.replace(/\]|\[/g, "");
}

// ../../node_modules/@hookform/resolvers/effect-ts/dist/effect-ts.mjs
function i2(i3, s2) {
  return void 0 === s2 && (s2 = { errors: "all", onExcessProperty: "ignore" }), function(u, c, f) {
    return decodeUnknown(i3, s2)(u).pipe(Effect_exports.catchAll(function(r2) {
      return Effect_exports.flip(ArrayFormatter.formatIssue(r2));
    }), Effect_exports.mapError(function(e) {
      var t = !f.shouldUseNativeValidation && "all" === f.criteriaMode, o2 = e.reduce(function(r2, e2) {
        var o3 = e2.path.join(".");
        if (r2[o3] || (r2[o3] = { message: e2.message, type: e2._tag }), t) {
          var n2 = r2[o3].types, i4 = n2 && n2[String(e2._tag)];
          r2[o3] = appendErrors(o3, t, r2, e2._tag, i4 ? [].concat(i4, e2.message) : e2.message);
        }
        return r2;
      }, {});
      return s(o2, f);
    }), Effect_exports.tap(function() {
      return Effect_exports.sync(function() {
        return f.shouldUseNativeValidation && o({}, f);
      });
    }), Effect_exports.match({ onFailure: function(r2) {
      return { errors: r2, values: {} };
    }, onSuccess: function(r2) {
      return { errors: {}, values: r2 };
    } }), Effect_exports.runPromise);
  };
}
export {
  i2 as effectTsResolver
};
//# sourceMappingURL=@hookform_resolvers_effect-ts.js.map
